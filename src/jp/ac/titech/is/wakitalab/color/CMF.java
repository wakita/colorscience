package jp.ac.titech.is.wakitalab.color;

/**
 * Implementation of color matching function.  A color matching for a
 * certain wavelength is a combination of R, G, B components in the
 * CIE RGB color space that matches the unit monochromatic stimulus.
 * In other words, a monochromatic color and its color matching are
 * visually equivalent for human eyes.
 *
 * <style>span.bar { text-decoration: overline }</style>
 *
 * $Id: CMF.java,v 1.5 2004/05/17 00:00:31 wakita Exp $
 * @author Ken Wakita
 * @version Experimental, Jan 19, 2003
 */

import jp.ac.titech.is.wakitalab.math.M;

public class CMF {
    /** The value in nanomter the lowest wavelength that this CFM
     * is measured. */
    public final int low;

    /** The value in nanometer the highest wavelength that this CFM
     * is measured. */
    public final int high;

    /** The step by which this CFM is measured */
    public final int step;

    /** CFM values given in CIE RGB */
    // public final RGB rgb[];
    private double cmf[][];

    /**
     * @param low The lowest wavelength (in nanometer) measured for
     * this CFM.
     *
     * @param high The highest wavelength (in nanometer) measured for
     * this CFM.
     *
     * @param step The step in nanometer (in nanometer) that this CFM
     * is measured by.
     *
     * @param cmf CMF measured from <code>low</code> nanometer to
     * <code>high</code> nanometer by <code>step</code> nanometer
     * steps.
     */

    public CMF(int low, int high, int step, double cmf[][]) {
        if (low > high)
            throw new IllegalArgumentException(
                "Illegal bound: [" + low + ", " + high + "]");
        if (step <= 0)
            throw new IllegalArgumentException(
                "Positive step required: " + step);
        if (cmf.length != 3)
            throw new IllegalArgumentException(
                "Triple is required for RGB data specification.");
        if (cmf[0].length != (high - low) / step + 1)
            throw new IllegalArgumentException(
                "Inconsistent parameters: region = [" + low + ", " + high + "]; step = " + step
                    + "; rgb.length = " + cmf[0].length);

        this.low = low;
        this.high = high;
        this.step = step;
        this.cmf = cmf;
    }

    public double[] tristimulus(PolychromaticStimulus stimulus) {
    	double tristimulus[] = new double[] { 0.0, 0.0, 0.0 };
    	
    	for (int l = low; l <= high; l += step) {
    		double r = stimulus.radiance(l);
			for (int i = 0; i < 3; i++)
				tristimulus[i] += cmf[i][l] * r;
    	}
    	
    	return tristimulus;
    }

    /**
     * Color-matching functions <span class="bar">r</span>(&lambda;),
     * <span class="bar">g</span>(&lambda;), <span
     * class="bar">b</span>(&lambda;) for spectrally pure colors for a
     * 2-deg field (CIE, 1931).
     */

	public static final CMF fundamentals2deg = new CMF(380, 780, 5,
        new double[][]{
            {
                +0.00003,  0.00005,  0.00010,  0.00017, // 380-
                +0.00030,  0.00047,  0.00084,  0.00139, // 400-
                +0.00211,  0.00266,  0.00218,  0.00036, // 420-
                -0.00261, -0.00673, -0.01213, -0.01874, // 440-
                -0.02608, -0.03324, -0.03933, -0.04471, // 460-
                -0.04939, -0.05364, -0.05814, -0.06414, // 480-
                -0.07173, -0.08120, -0.08901, -0.09356, // 500-
                -0.09264, -0.08473, -0.07101, -0.05316, // 520-
                -0.03152, -0.00613,  0.02279,  0.05514, // 540-
                +0.09060,  0.12840,  0.16768,  0.20715, // 560-
                +0.24526,  0.27989,  0.30928,  0.33184, // 580-
                +0.34429,  0.34756,  0.33971,  0.32265, // 600-
                +0.29708,  0.26348,  0.22677,  0.19233, // 620-
                +0.15968,  0.12905,  0.10167,  0.07857, // 640-
                +0.05932,  0.04366,  0.03149,  0.02294, // 660-
                +0.01687,  0.01187,  0.00819,  0.00572, // 680-
                +0.00410,  0.00291,  0.00210,  0.00148, // 700-
                +0.00105,  0.00074,  0.00052,  0.00036, // 720-
                +0.00025,  0.00017,  0.00012,  0.00008, // 740-
                +0.00006,  0.00004,  0.00003,  0.00001, // 760-
                +0.00000
            }, {
                -0.00001, -0.00002, -0.00004, -0.00007, // 380-
                -0.00014, -0.00022, -0.00041, -0.00070, // 400-
                -0.00110, -0.00143, -0.00119, -0.00021, // 420-
                +0.00149,  0.00379,  0.00678,  0.01046, // 440-
                +0.01485,  0.01977,  0.02538,  0.03183, // 460-
                +0.03914,  0.04713,  0.05689,  0.06948, // 480-
                +0.08536,  0.10593,  0.12860,  0.15262, // 500-
                +0.17468,  0.19113,  0.20317,  0.21083, // 520-
                +0.21466,  0.21487,  0.21178,  0.20588, // 540-
                +0.19702,  0.18522,  0.17087,  0.15429, // 560-
                +0.13610,  0.11686,  0.09754,  0.07909, // 580-
                +0.06246,  0.04776,  0.03557,  0.02583, // 600-
                +0.01828,  0.01253,  0.00833,  0.00537, // 620-
                +0.00334,  0.00199,  0.00116,  0.00066, // 640-
                +0.00037,  0.00021,  0.00011,  0.00001, // 660-
                +0.00000,  0.00000,  0.00000,  0.00000, // 680-
                +0.00000,  0.00000,  0.00000,  0.00000, // 700-
                +0.00000,  0.00000,  0.00000,  0.00000, // 720-
                +0.00000,  0.00000,  0.00000,  0.00000, // 740-
                +0.00000,  0.00000,  0.00000,  0.00000, // 760-
                +0.00000
            }, {
                +0.00117,  0.00189,  0.00359,  0.00647, // 380-
                +0.01214,  0.01969,  0.03707,  0.06637, // 400-
                +0.11541,  0.18575,  0.24769,  0.29012, // 420-
                +0.31228,  0.31860,  0.31670,  0.31166, // 440-
                +0.29821,  0.27295,  0.22991,  0.18592, // 460-
                +0.14494,  0.10968,  0.08257,  0.06246, // 480-
                +0.04776,  0.03688,  0.02698,  0.01842, // 500-
                +0.01221,  0.00830,  0.00549,  0.00320, // 520-
                +0.00146,  0.00023, -0.00058, -0.00105, // 540-
                -0.00130, -0.00138, -0.00135, -0.00123, // 560-
                -0.00108, -0.00093, -0.00079, -0.00063, // 580-
                -0.00049, -0.00038, -0.00030, -0.00022, // 600-
                -0.00015, -0.00011, -0.00008, -0.00005, // 620-
                -0.00003, -0.00002, -0.00001, -0.00001, // 640-
                +0.00000,  0.00000,  0.00000,  0.00000, // 660-
                +0.00000,  0.00000,  0.00000,  0.00000, // 680-
                +0.00000,  0.00000,  0.00000,  0.00000, // 700-
                +0.00000,  0.00000,  0.00000,  0.00000, // 720-
                +0.00000,  0.00000,  0.00000,  0.00000, // 740-
                +0.00000,  0.00000,  0.00000,  0.00000, // 760-
                +0.00000
            } });
            
    public static final CMF chromaticity2deg =
		new CMF(380, 780, 5,
			new double[][]{
				{ +0.0272,  0.0268,  0.0263,  0.0256, // 380
				  +0.0247,  0.0237,  0.0225,  0.0207, // 400
				  +0.0181,  0.0142,  0.0088,  0.0012, // 420
				  -0.0084, -0.0213, -0.0390, -0.0618, // 440
				  -0.0909, -0.1281, -0.1821, -0.2584, // 460
				  -0.3667, -0.5200, -0.7150, -0.9459, // 480
				  -1.1685, -1.3182, -1.3371, -1.2076, // 500
				  -0.9830, -0.7386, -0.5159, -0.3304, // 520
				  -0.1707, -0.0293,  0.0974,  0.2121, // 540
				  +0.3164,  0.4112,  0.4973,  0.5751, // 560
				  +0.6449,  0.7071,  0.7617,  0.8087, // 580
				  +0.8475,  0.8800,  0.9059,  0.9265, // 600
				  +0.9425,  0.9550,  0.9649,  0.9730, // 620
				  +0.9797,  0.9850,  0.9888,  0.9918, // 640
				  +0.9940,  0.9954,  0.9966,  0.9975, // 660
				  +0.9984,  0.9991,  0.9996,  0.9999, // 680
				  +1.0000,  1.0000,  1.0000,  1.0000, // 700
				  +1.0000,  1.0000,  1.0000,  1.0000, // 720
				  +1.0000,  1.0000,  1.0000,  1.0000, // 740
				  +1.0000,  1.0000,  1.0000,  1.0000, // 760
				  +1.0000
				}, {
				  -0.0115, -0.0114, -0.0114, -0.0113, // 380
				  -0.0112, -0.0111, -0.0109, -0.0104, // 400
				  -0.0094, -0.0076, -0.0048, -0.0007, // 420
				  +0.0048,  0.0120,  0.0218,  0.0345, // 440
				  +0.0517,  0.0762,  0.1175,  0.1840, // 460
				  +0.2906,  0.4568,  0.6996,  1.0247, // 480
				  +1.3905,  1.7195,  1.9318,  1.9699, // 500
				  +1.8534,  1.6662,  1.4761,  1.3105, // 520
				  +1.1628,  1.0282,  0.9051,  0.7919, // 540
				  +0.6881,  0.5932,  0.5067,  0.4283, // 560
				  +0.3579,  0.2952,  0.2402,  0.1928, // 580
				  +0.1537,  0.1209,  0.0949,  0.0741, // 600
				  +0.0580,  0.0454,  0.0354,  0.0272, // 620
				  +0.0205,  0.0152,  0.0113,  0.0083, // 640
				  +0.0061,  0.0047,  0.0035,  0.0025, // 660
				  +0.0016,  0.0009,  0.0004,  0.0001, // 680
				  +0.0000,  0.0000,  0.0000,  0.0000, // 700
				  +0.0000,  0.0000,  0.0000,  0.0000, // 720
				  +0.0000,  0.0000,  0.0000,  0.0000, // 740
				  +0.0000,  0.0000,  0.0000,  0.0000, // 760
				  +0.0000
				}, {
				  +0.9843,  0.9846,  0.9851,  0.9857, // 380
				  +0.9865,  0.9874,  0.9884,  0.9897, // 400
				  +0.9913,  0.9934,  0.9960,  0.9995, // 420
				  +1.0036,  1.0093,  1.0172,  1.0273, // 440
				  +1.0392,  1.0519,  1.0646,  1.0744, // 460
				  +1.0761,  1.0632,  1.0154,  0.9212, // 480
				  +0.7780,  0.5987,  0.4053,  0.2377, // 500
				  +0.1296,  0.0724,  0.0398,  0.0199, // 520
				  +0.0079,  0.0011, -0.0025, -0.0040, // 540
				  -0.0045, -0.0044, -0.0040, -0.0034, // 560
				  -0.0028, -0.0023, -0.0019, -0.0015, // 580
				  -0.0012, -0.0009, -0.0008, -0.0006, // 600
				  -0.0005, -0.0004, -0.0003, -0.0002, // 620
				  +0.0002,  0.0002,  0.0001,  0.0001, // 640
				  +0.0001,  0.0001,  0.0001,  0.0000, // 660
				  +0.0000,  0.0000,  0.0000,  0.0000, // 680
				  +0.0000,  0.0000,  0.0000,  0.0000, // 700
				  +0.0000,  0.0000,  0.0000,  0.0000, // 720
				  +0.0000,  0.0000,  0.0000,  0.0000, // 740
				  +0.0000,  0.0000,  0.0000,  0.0000, // 760
				  +0.0000 } });

    public CIERGB RGB(int l) {
    	return new CIERGB(M.interpolate(cmf[0], low, high, step, l, true),
                       M.interpolate(cmf[1], low, high, step, l, true),
                       M.interpolate(cmf[2], low, high, step, l, true));
    }
}
