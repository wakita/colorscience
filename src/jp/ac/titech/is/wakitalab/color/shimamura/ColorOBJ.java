/* * 作成日: 2004/05/18 */package jp.ac.titech.is.wakitalab.color.shimamura;import java.util.*;import java.io.IOException;import java.io.ObjectOutputStream;import java.io.ObjectInputStream;/** * 一つの要素に対する数種の色情報の塊 * @author shinamu1 */public class ColorOBJ implements java.io.Serializable{	final int num;		//TODO いつ色OBJをnewするか。	//TODO 色OBJがnullのときの挙動をすべてに対してチェック	//optimizedDichromatSRGB, optimizedDihromatLab は非推奨	private SRGB representSRGB,				firstSRGB, optimizedSRGB, firstDichromatSRGB, optimizedDichromatSRGB,				firstProSRGB, firstDeuSRGB, firstTriSRGB,				optProSRGB, optDeuSRGB, optTriSRGB;	private Lab firstLab, optimizedLab, firstDichromatLab, optimizedDichromatLab,				firstProLab, firstDeuLab, firstTriLab,				optProLab, optDeuLab, optTriLab;	private AreaOBJ[] areas;	private int areaNum;	private Vector<AreaOBJ> areasVector;		static final long serialVersionUID = "ColorOBJ".hashCode();		ColorOBJ(int num) { this.num = num; }				/*	 * Set Drow-Color	 */	void setRepresentFirst() { representSRGB = firstSRGB; }		void setRepresentFirstDichromat(int dichromatType) {		representSRGB = firstDichromatSRGB = getFirstDichromatSRGB(dichromatType); }		void setRepresentOptimized() { representSRGB = optimizedSRGB; }		void setRepresentOptimizedDichromat(int dichromatType) {		representSRGB = optimizedDichromatSRGB = getOptimizedDichromatSRGB(dichromatType); }			/*	 * setColor ポリシー：引き数の色を色OBJにセットする。	 */		/**	 * 初期色のセット	 * @param srgbIng srgbを表す。 [0,256^3-1]	 */	void setFirstSRGB(int srgbInt) {		if(firstSRGB==null || firstLab==null ||				firstProSRGB==null || firstDeuSRGB==null || firstTriSRGB==null ||				firstProLab==null || firstDeuLab==null || firstTriLab==null) {			firstSRGB = new SRGB(srgbInt);			firstLab = firstSRGB.getLab();			firstProLab = Dichromat.convert(firstLab, Dichromat.PROTANOPE);			firstDeuLab = Dichromat.convert(firstLab, Dichromat.DEUTERANOPE);			firstTriLab = Dichromat.convert(firstLab, Dichromat.TRITANOPE);			firstProSRGB = firstProLab.getSRGB();			firstDeuSRGB = firstDeuLab.getSRGB();			firstTriSRGB = firstTriLab.getSRGB();		}		else  {			firstSRGB.setInt(srgbInt);			firstSRGB.getLab(firstLab);			Dichromat.convert(firstLab, firstProLab, Dichromat.PROTANOPE);			Dichromat.convert(firstLab, firstDeuLab, Dichromat.DEUTERANOPE);			Dichromat.convert(firstLab, firstTriLab, Dichromat.TRITANOPE);			firstProLab.getSRGB(firstProSRGB);			firstDeuLab.getSRGB(firstDeuSRGB);			firstTriLab.getSRGB(firstTriSRGB);		}	}	/**	 * 最適化の色セット。	 * @param srgb	 */	void setOptimizedSRGB(SRGB srgb) {		if(optimizedSRGB==null || optimizedLab==null ||				optProSRGB==null || optDeuSRGB==null || optTriSRGB==null ||				optProLab==null || optDeuLab==null || optTriLab==null) {			optimizedSRGB = new SRGB(srgb);			optimizedLab = optimizedSRGB.getLab();			optProLab = Dichromat.convert(optimizedLab, Dichromat.PROTANOPE);			optDeuLab = Dichromat.convert(optimizedLab, Dichromat.DEUTERANOPE);			optTriLab = Dichromat.convert(optimizedLab, Dichromat.TRITANOPE);			optProSRGB = optProLab.getSRGB();			optDeuSRGB = optDeuLab.getSRGB();			optTriSRGB = optTriLab.getSRGB();		} else {			optimizedSRGB.setVector3d(srgb);			optimizedSRGB.getLab(optimizedLab);			Dichromat.convert(optimizedLab, optProLab, Dichromat.PROTANOPE);			Dichromat.convert(optimizedLab, optDeuLab, Dichromat.DEUTERANOPE);			Dichromat.convert(optimizedLab, optTriLab, Dichromat.TRITANOPE);			optProLab.getSRGB(optProSRGB);			optDeuLab.getSRGB(optDeuSRGB);			optTriLab.getSRGB(optTriSRGB);		}	}	/**	 * 最適化の色セット。	 * @param lab	 */	void setOptimizedLab(Lab lab) {		if(optimizedSRGB==null || optimizedLab==null ||				optProSRGB==null || optDeuSRGB==null || optTriSRGB==null ||				optProLab==null || optDeuLab==null || optTriLab==null) {			optimizedLab = new Lab();			optimizedSRGB = optimizedLab.getSRGB();			optProLab = Dichromat.convert(optimizedLab, Dichromat.PROTANOPE);			optDeuLab = Dichromat.convert(optimizedLab, Dichromat.DEUTERANOPE);			optTriLab = Dichromat.convert(optimizedLab, Dichromat.TRITANOPE);			optProSRGB = optProLab.getSRGB();			optDeuSRGB = optDeuLab.getSRGB();			optTriSRGB = optTriLab.getSRGB();		} else {			optimizedLab.setVector3d(lab);			optimizedLab.getSRGB(optimizedSRGB);			Dichromat.convert(optimizedLab, optProLab, Dichromat.PROTANOPE);			Dichromat.convert(optimizedLab, optDeuLab, Dichromat.DEUTERANOPE);			Dichromat.convert(optimizedLab, optTriLab, Dichromat.TRITANOPE);			optProLab.getSRGB(optProSRGB);			optDeuLab.getSRGB(optDeuSRGB);			optTriLab.getSRGB(optTriSRGB);		}	}				/*	 * Get Drow-Color	 */	SRGB getRepresentSRGB() { return representSRGB; }				/*	 * getColorポリシー：色OBJを渡してそこに代入してやる。	 */		/**	 * 初期色のSRGBを返す	 * @param returnSRGB	 */	void getFirstSRGB(SRGB returnSRGB) { returnSRGB.setVector3d(firstSRGB);}	/**	 * 初期色のLabを返す	 * @param returnLab	 */	void getFirstLab(Lab returnLab) {returnLab.setVector3d(firstLab);}	/**	 * 初期色の色盲SRGBを返す	 * @param returnSRGB	 */	void getFirstProtanopeSRGB(SRGB returnSRGB) {		if(firstProSRGB!=null) returnSRGB.setVector3d(firstProSRGB);		else System.out.println("firstProSRGB is null.");	}	void getFirstDeuteranopeSRGB(SRGB returnSRGB) {		if(firstDeuSRGB!=null) returnSRGB.setVector3d(firstDeuSRGB);		else System.out.println("firstDeuSRGB is null.");	}	void getFirstTritanopeSRGB(SRGB returnSRGB) {		if(firstTriSRGB!=null) returnSRGB.setVector3d(firstTriSRGB);		else System.out.println("firstTriSRGB is null.");	}	/**	 * 初期色の色盲のLabを返す	 * @param returnLab	 */	void getFirstProtanopeLab(Lab returnLab) {		if(firstProLab!=null) returnLab.setVector3d(firstProLab);		else System.out.println("firstProLab is null.");	}	void getFirstDeuteranopeLab(Lab returnLab) {		if(firstDeuLab!=null) returnLab.setVector3d(firstDeuLab);		else System.out.println("firstDeuLab is null.");	}	void getFirstTritanopeLab(Lab returnLab) {		if(firstTriLab!=null) returnLab.setVector3d(firstTriLab);		else System.out.println("firstTriLab is null.");	}		/**	 * 最適色のSRGBを返す	 * @param returnSRGB	 */	void getOptimizedSRGB(SRGB returnSRGB) { returnSRGB.setVector3d(optimizedSRGB);}	/**	 * 最適色のLabを返す	 * @param returnLab	 */	void getOptimizedLabB(Lab returnLab) { returnLab.setVector3d(optimizedLab);}	/**	 * 最適色の色盲のSRGBを返す	 * @param returnSRGB	 */	void getOptimizedProtanopeSRGB(SRGB returnSRGB) {		if(optProSRGB!=null) returnSRGB.setVector3d(optProSRGB);		else System.out.println("optProSRGB is null.");	}	void getOptimizedDeuteranopeSRGB(SRGB returnSRGB) {		if(optDeuSRGB!=null) returnSRGB.setVector3d(optDeuSRGB);		else System.out.println("optDeuSRGB is null.");	}	void getOptimizedTritanopeSRGB(SRGB returnSRGB) {		if(optTriSRGB!=null) returnSRGB.setVector3d(optTriSRGB);		else System.out.println("optTriSRGB is null.");	}	/**	 * 最適色の色盲のLabを返す	 * @param returnLab	 */	void getOptimizedProtanopeLab(Lab returnLab) {		if(optProLab!=null) returnLab.setVector3d(optProLab);		else System.out.println("optProLab is null.");	}	void getOptimizedDeuteranopeLab(Lab returnLab) {		if(optDeuLab!=null) returnLab.setVector3d(optDeuLab);		else System.out.println("optDeuLab is null.");	}	void getOptimizedTritanopeLab(Lab returnLab) {		if(optTriLab!=null) returnLab.setVector3d(optTriLab);		else System.out.println("optTriLab is null.");	}		/*	 * 以下のメソッドは、いずれ無くしたい。	 */	SRGB getFirstSRGB() { return firstSRGB; }		SRGB getFirstDichromatSRGB(int dichromatType) {		return firstDichromatSRGB = Dichromat.convert(firstLab, dichromatType).getSRGB(); }		SRGB getFirstDichromatSRGB() { return firstDichromatSRGB; }		SRGB getOptimizedSRGB() { return optimizedSRGB; }		/**	 * 使わないように。	 * @param dichromatType	 * @return	 */	SRGB getOptimizedDichromatSRGB(int dichromatType) {		return optimizedDichromatSRGB = Dichromat.convert(optimizedLab, dichromatType).getSRGB(); }		/**	 * 使わないように。	 * @return	 */	SRGB getOptimizedDichromatSRGB() { return optimizedDichromatSRGB; }		Lab getFirstLab() { return firstLab; }		Lab getFirstDichromatLab(int dichromatType) {		return firstDichromatLab = Dichromat.convert(firstLab, dichromatType) ; }		Lab getFirstDichromatLab() { return firstDichromatLab; }		Lab getOptimizedLab() {	return optimizedLab; }		/**	 * 使わないように。	 * @param dichromatType	 * @return	 */	Lab getOptimizedDichromatLab(int dichromatType) {		return optimizedDichromatLab = Dichromat.convert(optimizedLab, dichromatType) ; }		/**	 * 使わないように。	 * @return	 */	Lab getOptimizedDichromatLab() { return optimizedDichromatLab; }				/*	 * Get Area Info	 */	int getAreaNum() { return areaNum; }		AreaOBJ[] getAreas() { return areas; }				/* この色の領域が何個あるかわからない場合に、	 * まずVectorに追加していき、	 * 終了時に配列を作成する。	 * ３つセットで使うこと。	 */	void prepareAddAreaV() {		areasVector = new Vector<AreaOBJ>();	}	/*	 * これと	 */	void addAreaV(AreaOBJ area) {		areasVector.add(area);	}	/*	 * これと。	 */	void endAddAreaV() {		areaNum = areasVector.size();		Iterator iterator = areasVector.iterator();		int num = 0;		if (areas == null) {			areas = new AreaOBJ[areaNum];		}		while(iterator.hasNext()) {			 areas[num++]= (AreaOBJ)(iterator.next());		}		areasVector = null;	}		/**	 * 読み込みメソッド。final変数numは勝手に読み込む？	 * @param in	 * @throws IOException	 * @throws ClassNotFoundException	 */	public void readObject(ObjectInputStream in)	throws IOException, ClassNotFoundException {		firstSRGB = (SRGB)in.readObject();		setFirstSRGB(firstSRGB.getInt());		optimizedSRGB = (SRGB)in.readObject();		setOptimizedSRGB(optimizedSRGB);	}	/**	 * 保存メソッド numは保存しないでみた。	 * @param out	 * @throws IOException	 * @throws ClassNotFoundException	 */	public void writeObject(ObjectOutputStream out)	throws IOException, ClassNotFoundException {		out.writeObject(firstSRGB);		out.writeObject(optimizedSRGB);	}	}