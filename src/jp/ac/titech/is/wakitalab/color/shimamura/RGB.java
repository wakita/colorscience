/* * 作成日: 2003/11/16 * */package jp.ac.titech.is.wakitalab.color.shimamura;/** * @author shimaken * RGBの色空間 */public class RGB extends Vector3D {		/*	 * 定数	 */		public static double ir = 72.0962;	public static double ig = 1.3791;	public static double ib = 1.0;			/**	 * RGB to XYZ の変換行列。	 */	public static Matrix3X3 matrix_toXYZ = new Matrix3X3 (		2.76888, 1.75175, 1.13016,		1.00000, 4.59070, 0.06010,		0.00000, 0.05651, 5.59427);		/**	 * RGB to LMS の変換行列。	 */	public static Matrix3X3 matrix_toLMS = new Matrix3X3 (//		5.89749E-3, 0.924341, 0.0351131,//		3.65317E-4, 0.993742, 0.0539344,//		0.0, 2.85277E-3, 0.919756);		ir*5.89749E-3, ig*0.924341, ib*0.0351131,		ir*3.65317E-4, ig*0.993742, ib*0.0539344,		ir*0.0, ig*2.85277E-3, ib*0.919756);		static RGB tempRGB = new RGB();			/*	 * コンストラクター	 */	 		/**	 * コンストラクタ	 */	public RGB () {		super();	}	/**	 * double をとるコンストラクター	 */	public RGB (double value1, double value2, double value3) {		super(value1, value2, value3);	}		/**	 * int をとるコンストラクター	 */	public RGB (int value1, int value2, int value3) {		super(value1, value2, value3);	}		/**	 * double 配列をとるコンストラクター	 */	public RGB (double values[]) {		super(values);	}		/**	 * Vector3D をとるコンストラクター	 */	public RGB (Vector3D v) {		super(v);	}		/*	 * メソッド	 */			/**	 * XYZに変換	 */	XYZ getXYZ() {		return new XYZ(matrix_toXYZ.convertVector3D((Vector3D)this));	}		void getXYZ(XYZ returnXYZ) {		getDoubles(tempValues);		matrix_toXYZ.convertDoubles(tempValues);		returnXYZ.setValue(tempValues[0], tempValues[1], tempValues[2]);	}		/**	 * SRGBに変換	 */	SRGB getSRGB() {		return getXYZ().getSRGB();	}		/**	 * SRGBに変換	 * @return	 */	void getSRGB(SRGB returnSRGB) {		getXYZ(XYZ.tempXYZ);		XYZ.tempXYZ.getSRGB(returnSRGB);	}	/**	 * Labに変換	 */	Lab getLab() {		return getXYZ().getLab();	}		void getLab(Lab returnLab) {		getXYZ(XYZ.tempXYZ);		XYZ.tempXYZ.getLab(returnLab);	}		/**	 * LMSに変換。	 * @return LMS	 */	LMS getLMS() {		return new LMS(matrix_toLMS.convertVector3D((Vector3D)this));	}		/**	 * LMSに変換。メモリーを与える。	 * @param returnLMS	 * @return	 */	LMS getLMS(LMS returnLMS) {		getDoubles(tempValues);		matrix_toLMS.convertDoubles(tempValues);		returnLMS.setValue(tempValues[0], tempValues[1], tempValues[2]);		return returnLMS;	}}