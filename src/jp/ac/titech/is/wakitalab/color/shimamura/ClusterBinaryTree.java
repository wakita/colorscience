/* * 作成日: 2004/06/03 * * この生成されたコメントの挿入されるテンプレートを変更するため * ウィンドウ > 設定 > Java > コード生成 > コードとコメント */package jp.ac.titech.is.wakitalab.color.shimamura;/** * @author shinamu1 * key の大小の順序に整理された ClusterPoint の二分木で、 * 同じ key の ClusterPoint の数 weight を数える。 */public class ClusterBinaryTree {	private ClusterBinaryTree left;	private ClusterBinaryTree right;	private int key;	private int weight;	private ClusterPoint cluster;		ClusterBinaryTree(int key) {		this.key = key;		weight = 1;	}		/**	 * addKey を大小の順序どおりに二分木につけくわえる。weight も一つ加算。	 * @param addKey	 * @return	 */	boolean add(int addKey) {		if (addKey < key) {			if (left != null) {				return left.add(addKey);			} else {				left = new ClusterBinaryTree(addKey);				return true;			}		} else if (addKey > key) {			if (right != null) {				return right.add(addKey);			} else {				right = new ClusterBinaryTree(addKey);				return true;			}		} else {			weight++;			return false;		}	}		/**	 * ClusterPoint の配列を作る。ただし key の小さい順。	 * @param points ： keyデータを入れるための配列	 * @param tail ： 現在のClusterPoint配列pointsの長さ（ソートの再帰に必要）	 * @return	 */	int sort (ClusterPoint[] points, int tail) {		if (left != null) {			tail = left.sort(points, tail);		}		points[tail] = new ClusterPoint(key);		points[tail].setWeight(weight);		cluster = points[tail];		tail++;		if (right != null) {			tail = right.sort(points, tail);		}		return tail;	}		/**	 * 二分木 の中から srgbInt=key となる ClusterPoint を渡す。	 * @param srgbInt	 * @return	 */	ClusterPoint getClusterPoint(int srgbInt) {		if (srgbInt < key) {			if (left != null) {				return left.getClusterPoint(srgbInt);			} else {				return null;			}		} else if (srgbInt > key) {			if (right != null) {				return right.getClusterPoint(srgbInt);			} else {				return null;			}		} else {			return cluster;		}	}}