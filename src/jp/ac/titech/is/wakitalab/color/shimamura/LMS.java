/* * 作成日: 2003/12/25 * */package jp.ac.titech.is.wakitalab.color.shimamura;/** * @author shimaken * */public class LMS extends Vector3D {		/*	 * 定数	 */			/**	 * LMS to RGB の変換行列	 */	final static Matrix3X3 matrix_toRGB = new Matrix3X3 (//		179.93155506644368,  -167.3739428737259,  2.945627425453205,//		-0.06615713442159471,  1.0680067959607975,  -0.06010216150740972,//		2.051969091410034E-4,  -0.0033125935001381713,  1.087431294433832);	2.49571482361683,-2.321536265069808,0.040856902658575694,	-0.04797123806946176,0.774423026583132,-0.04358071315162767,	2.0519690914100344E-4,-0.0033125935001381713,1.0874312944338318);		final static Matrix3X3 matrix_toXYZ = new Matrix3X3 (			6.8265331498668225, -5.075203557479605, 1.2657566980872528,			2.275505593345591, 1.2334084361960178, -0.09385445641112815, 			-0.0015629277504050426, 0.02523110279219482, 6.0809215214121535);		final static Matrix3X3 matrix_toLMS = new Matrix3X3 (			19.981700480058574,-19.959099526406533, 1.310488124253163,			-2.798705070902582,7.866873164019723,   -1.3243675514005535,			-0.0549785998617061,-0.5122706564767077,6.483806157828826);		// private static LMS tempLMS = new LMS();	private static Lab tempLab1 = new Lab(), tempLab2 = new Lab();			/*	 * コンストラクター	 */			public LMS () {		super();	}		public LMS (double value1, double value2, double value3) {		super(value1, value2, value3);	}		public LMS (Vector3D v) {		super(v);	}			/*	 * メソッド	 */			/**	 * RGB に変換する。	 * @return newされたRGB	 */	public RGB getRGB() {		return new RGB(LMS.matrix_toRGB.convertVector3D((Vector3D)this));	}		/**	 * RGB に変換する。メモリー与える。	 * @param returnRGB	 */	public void getRGB(RGB returnRGB) {		getDoubles(tempValues);		LMS.matrix_toRGB.convertDoubles(tempValues);		returnRGB.setValue(tempValues[0], tempValues[1], tempValues[2]);	}		/**	 * XYZに変換する。	 * @return newされたXYZ	 */	public XYZ getXYZ() {		return new XYZ(LMS.matrix_toXYZ.convertVector3D((Vector3D)this));	}	/**	 * XYZ に変換する。メモリーを与える。	 * @param returnXYZ	 */	public void getXYZ(XYZ returnXYZ) {		getDoubles(tempValues);		matrix_toXYZ.convertDoubles(tempValues);		returnXYZ.setValue(tempValues[0], tempValues[1], tempValues[2]);	}		/**	 * SRGBに変換する。	 * @return newされたSRGB	 */	public SRGB getSRGB() {		return getRGB().getSRGB();	}	/**	 * SRGB に変換する。メモリー与える。	 * @param returnSRGB	 */	public void getSRGB(SRGB returnSRGB) {		getRGB(RGB.tempRGB);		RGB.tempRGB.getSRGB(returnSRGB);	}		public SRGBdash getSRGBdash() {		SRGBdash srgbDash = new SRGBdash();		matrix_toLMS.convertVector3D((Vector3D)this, (Vector3D)srgbDash);		return srgbDash;	}	public void getSRGBdash(SRGBdash returnSRGBdash) {		matrix_toLMS.convertVector3D((Vector3D)this, (Vector3D)returnSRGBdash);	}		/**	 * Labに変換する。	 * @return newされたLab	 */	public Lab getLab() {		return getRGB().getLab();	}		public void getLab(Lab returnLab) {		getRGB(RGB.tempRGB);		RGB.tempRGB.getLab(returnLab);	}		/**	 * 同じ内容のLMSを作成する	 * @return	 */	public LMS copyLMS() {		LMS lms = new LMS ((Vector3D)this);		return lms;	}		/**	 * Labに変換して色差を計算する。	 * @param lms1	 * @param lms2	 * @return	 */	public double getColorDistance76(LMS lms1, LMS lms2) {		lms1.getLab(tempLab1);		lms2.getLab(tempLab2);		return tempLab1.getColorDistance76(tempLab2);	}		/**	 * これの中身をlmsに代入する	 * @param lms	 */	public void substituteLMS(LMS lms) {		lms.setValue1(getValue1());		lms.setValue2(getValue2());		lms.setValue3(getValue3());	}		public boolean boundaryReviseSRGBdash() {		getXYZ(XYZ.tempXYZ);		boolean revised = XYZ.tempXYZ.boundaryReviseSRGBdash();		XYZ.tempXYZ.getLMS(this);		return revised;	}}