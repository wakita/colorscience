/* * 作成日: 2003/11/16 * * この生成されたコメントの挿入されるテンプレートを変更するため * ウィンドウ > 設定 > Java > コード生成 > コードとコメント */package jp.ac.titech.is.wakitalab.color.shimamura;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.io.Serializable;/** * @author 斉藤幸平 * * この生成されたコメントの挿入されるテンプレートを変更するため * ウィンドウ > 設定 > Java > コード生成 > コードとコメント */public class Vector3D implements Serializable{			/*	 * 定数	 */			/**	 * 第一成分。	 */	private double value1;		/**	 * 第二成分。	 */	private double value2;		/**	 * 第三成分。	 */	private double value3;		/**	 * 十分小さいと考える数字	 */	public static final double smallNumber = 0.105;		protected static double[] tempValues = new double[3];		static final long serialVersionUID = "Vector3D".hashCode();		/*	 * コンストラクター	 */			/**	 * 各成分をゼロで初期化するコンストラクタ。	 */	public Vector3D(){		setValue1(0.0);		setValue2(0.0);		setValue3(0.0);	}		/**	 * 値を一つずつ与えて初期化するコンストラクタ。	 * @param value1 第一成分	 * @param value2 第二成分	 * @param value3 第三成分	 */	public Vector3D(double value1, double value2, double value3){		setValue1(value1);		setValue2(value2);		setValue3(value3);	}		/**	 * 二次元配列を引数に取るコンストラクタ。	 * 引数の配列長は3以上でなければならない。	 * @param values 初期値の配列	 */	public Vector3D(double[] values){		setValue1(values[0]);		setValue2(values[1]);		setValue3(values[2]);	}		/**	 * Vector3Dの値をもらって作るコンストラクター	 * @param v	 */	public Vector3D(Vector3D v) {		setValue1(v.getValue1());		setValue2(v.getValue2());		setValue3(v.getValue3());	}			/*	 * メソッド	 */			/**	 * 第一成分を取得する。	 * @return 第一成分	 */	public double getValue1() {		return value1;	}	/**	 * 第二成分を取得する。	 * @return 第二成分	 */	public double getValue2() {		return value2;	}	/**	 * 第三成分を取得する。	 * @return 第三成分	 */	public double getValue3() {		return value3;	}	double getValue(int num) {		switch(num){		case 0: return value1;		case 1: return value2;		case 2: return value3;		default: assert false;			return -1000.0;		}	}		/**	 * double配列を入れて返す	 * @param doubles	 */	void getDoubles(double[] doubles) {		doubles[0] = getValue1();		doubles[1] = getValue2();		doubles[2] = getValue3();	}	/**	 * 第一成分を設定する。	 * @param value 設定する値	 */	void setValue1(double value) {		value1 = value;	}	/**	 * 第二成分を設定する。	 * @param value 設定する値	 */	void setValue2(double value) {		value2 = value;	}	/**	 * 第三成分を設定する。	 * @param value 設定する値	 */	void setValue3(double value) {		value3 = value;	}	void setValue(int num, double value) {		switch (num) {		case 0:setValue1(value);		break;		case 1:setValue2(value);		break;		case 2:setValue3(value);		break;		default: assert false;		}	}		/**	 * 三成分を指定して設定する。	 */	void setValue(double v1, double v2, double v3) {		value1 = v1;		value2 = v2;		value3 = v3;	}		/**	 * 引数のVector3D v の中身で３成分を設定する	 * @param v	 */	void setVector3d(Vector3D v) {		value1 = v.getValue1();		value2 = v.getValue2();		value3 = v.getValue3();	}		/**	 * このVector3D　のコピーを作る。	 * @param dest コピー先のベクトル	 */	Vector3D copy(){		Vector3D v = new Vector3D(getValue1(), getValue2(), getValue3());		return v;	}		/**	 * 3成分がマイナスのときに0に補正する	 */	void positiver () {		positiver1();		positiver2();		positiver3();	}	/**	 * 成分1がマイナスのときに0に補正する	 */	void positiver1 () {		if (getValue1() < 0.0) setValue1(0.0);			}	/**	 * 成分2がマイナスのときに0に補正する	 */	void positiver2 () {		if (getValue2() < 0.0) setValue2(0.0);	}	/**	 * 成分3がマイナスのときに0に補正する	 */	void positiver3 () {		if (getValue3() < 0.0) setValue3(0.0);	}		/**	 * int型でデータを設定する。	 * ２４〜１７ビットが第一成分、	 * １６〜９ビットが第二成分、	 * ８〜１ビットが第三成分となる。	 * @param intValue 設定する整数値。	 */	void setInt(int intValue){		int v1 = (intValue >> 16) & 0x000000ff;		int v2 = (intValue >> 8) & 0x000000ff;		int v3 = intValue & 0x000000ff;		setValue1(((double)v1) / 255.0);		setValue2(((double)v2) / 255.0);		setValue3(((double)v3) / 255.0);	}			/**	 * int型でデータを取得する。	 * ２４〜１７ビットが第一成分、	 * １６〜９ビットが第二成分、	 * ８〜１ビットが第三成分となる。	 * @return 整数表現	 */	int getInt(){		int v1 = (int)(getValue1() * 255.0);		int v2 = (int)(getValue2() * 255.0);		int v3 = (int)(getValue3() * 255.0);		if(v1 < 0){			v1 = 0;		}		else if(v1 > 255){			v1 = 255;		}		if(v2 < 0){			v2 = 0;		}		else if(v2 > 255){			v2 = 255;		}		if(v3 < 0){			v3 = 0;		}		else if(v3 > 255){			v3 = 255;		}		return ( 0xff000000 | (v1 << 16) | (v2 << 8) | v3);	}		/**	 * 二つのVector3Dの値がほぼ等しいかどうかの真偽を返す	 * @param v 比べるVector3D	 * @return ほぼ等しいかの真偽	 */	boolean match(Vector3D v) {		if ((getValue1()-v.getValue1() < smallNumber)			&& (getValue2()-v.getValue2() < smallNumber)			&& (getValue3()-v.getValue3() < smallNumber))				return true;		return false;	}		/**	 * ベクトルの文字列表現を取得する。	 * @return ベクトルの文字列表現	 */		public String toString(){		return ("(" + getValue1() + "," + getValue2() + "," + getValue3() + ")");	}		/**	 * 保存メソッド	 * @param out	 * @throws IOException	 * @throws ClassNotFoundException	 */	public void writeObject(ObjectOutputStream out)	throws IOException, ClassNotFoundException {		out.writeDouble(value1);		out.writeDouble(value2);		out.writeDouble(value3);	}	/**	 * 読み込みメソッド	 * @param in	 * @throws IOException	 * @throws ClassNotFoundException	 */	public void readObject(ObjectInputStream in)	throws IOException, ClassNotFoundException {		value1 = in.readDouble();		value2 = in.readDouble();		value3 = in.readDouble();	}}