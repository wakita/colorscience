/* * 作成日: 2004/05/21 * * この生成されたコメントの挿入されるテンプレートを変更するため * ウィンドウ > 設定 > Java > コード生成 > コードとコメント */package jp.ac.titech.is.wakitalab.color.shimamura;import java.util.Vector;import java.util.Iterator;/** * @author shinamu1 * * この生成されたコメントの挿入されるテンプレートを変更するため * ウィンドウ > 設定 > Java > コード生成 > コードとコメント */public class AreaOBJ {	final int num;	//隣接領域	private Vector<AreaOBJ> neighborsV;	private IntVector neighborLevelV;	//面積	private int area;	//所属するColorOBJ	private ColorOBJ colorOBJ;	//重心	private double centerI, centerJ;	//分散	private double disperse;		AreaOBJ(int num) {		this.num = num;		area = 0;		neighborsV = new Vector<AreaOBJ>();		neighborLevelV = new IntVector();		centerI = centerJ = 0;		disperse = 0;	}	/*	 * 隣りあう領域の登録と、隣り合う回数のカウント	 */	void setNeighbor(AreaOBJ neighbor) {		int index;		if ((index=neighborsV.indexOf(neighbor)) > -1) {			int tempLevel = ((Integer)(neighborLevelV.get(index))).intValue() + 1;			neighborLevelV.set(index, tempLevel);		} else {			neighborsV.addElement(neighbor);			neighborLevelV.add(1);		}	}		// デバッグ用	String getNeighborData() {		Iterator it = neighborsV.iterator();		Iterator itL = neighborLevelV.iterator();		String s = "";		while(it.hasNext()) {			s = s.concat("("+((AreaOBJ)(it.next())).getNum()+","+((Integer)(itL.next())).intValue()+"), ");		}		return s;	}	void setColorOBJ(ColorOBJ colorOBJ) {		this.colorOBJ = colorOBJ;	}	ColorOBJ getColorOBJ() {		return colorOBJ;	}	int getArea() {		return area;	}	int getNum() {		return num;	}	double getCenterX() {		return centerI;	}	double getCenterY() {		return centerJ;	}	// 分散を返す	double getDisperse() {		return disperse;	}	// 隣接エリアを返す	Vector getNeighborsV() {		return neighborsV;	}	// 隣接度合いを返す	IntVector getNeighborLevelV() {		return neighborLevelV;	}	// pixel の入力から、面積と重心を計算する。	void pixelAdd(int i, int j) {		centerI = (centerI*(double)area+(double)i)/(double)(area+1);		centerJ = (centerJ*(double)area+(double)j)/(double)(area+1);		area++;	}	//分散の計算途中	void calcuDisperse(int i, int j) {		disperse += (Math.pow(((double)i - centerI), 2.0)					+ Math.pow(((double)j - centerJ), 2.0));	}	//分散の計算の締めくくり	void endCalcuDisperse() {		disperse = disperse/(double)area;	}	//double autoCalcuCoeffDis}